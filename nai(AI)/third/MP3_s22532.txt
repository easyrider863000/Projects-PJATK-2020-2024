#-*- coding: UTF-8 -*-
from sys import argv
from random import uniform
from math import sqrt
from os import listdir
from os.path import isfile, join, isdir

class FileReader:
    alphabet = "qwertyuiopasdfghjklzxcvbnm"
    def __init__(self, pathToDirectory):
        pathToDirectory = pathToDirectory.replace("/","")
        listVectors = []

        directories = [f for f in listdir(pathToDirectory) if isdir(join(pathToDirectory, f))]
        for langFolder in directories:
            files = [f for f in listdir(pathToDirectory+"/"+langFolder) if isfile(join(pathToDirectory+"/"+langFolder, f))]
            for langFile in files:
                fileObj = open(pathToDirectory+"/"+langFolder+"/"+langFile, encoding="utf-8")
                fileText = "".join(["".join([ch for ch in line.lower() if ch in self.alphabet]) for line in fileObj.readlines()])

                listVectors.append((self.getVectorByText(fileText),langFolder))

        self.__listVectors = listVectors

    @staticmethod
    def getVectorByText(text):
        return Vector([text.count(ch)/len(text) for ch in FileReader.alphabet])

    def getListVectors(self):
        return self.__listVectors

class Vector:
    def __init__(self,coords):
        self.__coords = [float(i) for i in coords]
    def getCoords(self):
        return self.__coords
    def getDistanceToVector(self,vector2):
        if len(vector2.getCoords())!=len(self.getCoords()):
            return ValueError("Error object vector2")
        i=0
        sumV=0
        while i<len(self.getCoords()):
           sumV+=pow(self.getCoords()[i] - vector2.getCoords()[i], 2)
           i+=1
        return sqrt(sumV)
    def dotVector(self,vector2):
        if len(vector2.getCoords())!=len(self.getCoords()):
            return ValueError("Error object vector2")
        i = 0
        result = 0.0
        while i< len(vector2.getCoords()):
            result+=(vector2.getCoords()[i]*self.getCoords()[i])
            i+=1
        return result
    def __getitem__(self, key):
        return self.getCoords()[key]
    def __setitem__(self, key, value):
        self.__coords[key] = value
    def __str__(self):
        return str(self.getCoords())


class Perceptron:
    def __init__(self,listVectors, vectorWeights, prog, currentGroup):
        self.__listVectors = listVectors
        self.__weigths = vectorWeights
        self.__prog = prog

        self.__groups = []
        for i in listVectors:
            if i[1] not in [j["groupname"] for j in self.__groups]:
                groupObj = {"groupname":i[1], "index": 1}
                if currentGroup != i[1]: # initialize other groups as 0
                    groupObj["index"] = 0
                self.__groups.append(groupObj)
        self.__currentGroup = currentGroup

    def getIndexGroup(self,groupName):
        return [i["index"] for i in self.__groups if i["groupname"]==groupName][0]
    def getGroups(self):
        return self.__groups
    def getCurrentGroup(self):
        return self.__currentGroup
    def __getListVectors(self):
        return self.__listVectors

    def trainPerceptron(self, a, numberIterations=1):
        n = 0
        while n < numberIterations:
            isTrained = True
            for i in range(len(self.__getListVectors())):
                trainVector = self.__getListVectors()[i][0]
                groupIndex = self.getIndexGroup(self.__getListVectors()[i][1])
                f = self.__weigths.dotVector(trainVector) #net
                y = 0.0
                if f >= self.__prog:
                    y = 1.0
                if groupIndex != int(y):
                    if isTrained:
                        isTrained = False
                    for j in range(len(trainVector.getCoords())):
                        self.__weigths[j] = float(self.__weigths[j])+(float(a)*float(float(self.getIndexGroup(self.__getListVectors()[i][1]))-y)*float(self.__getListVectors()[i][0][j]))
                    #self.__prog = self.__prog-((float(self.getIndexGroup(self.__getListVectors()[i][1]))-y)*float(a))
            if not isTrained:
                numberIterations+=1
            n+=1
        return self.__weigths

    def getNetFromTestPerceptron(self, testVector):
        return self.__weigths.dotVector(testVector)


class PerceptronController:
    def __init__(self, listVectors, a, numberIterations=1):
        self.__listVectors = listVectors
        self.__weigths = Vector([uniform(-5,5) for i in listVectors[0][0].getCoords()])
        self.__prog = uniform(-5,5)
        self.__a = a
        self.__numberIterations = numberIterations

        groups = list(set([item[1] for item in listVectors]))

        self.__perceptrons = []
        for gr in groups:
            self.__perceptrons.append(Perceptron(listVectors,Vector(self.__weigths.getCoords()),self.__prog,gr))


    def __getListVectors(self):
        return self.__listVectors
    def getPerceptrons(self):
        return self.__perceptrons
    def trainPerceptrons(self):
        [i.trainPerceptron(self.__a,self.__numberIterations) for i in self.__perceptrons]
    def testPerceptrons(self,testVector):
        return [(i.getNetFromTestPerceptron(testVector), i.getCurrentGroup()) for i in self.__perceptrons]
    def getResultGroupByTest(self,testVector):
        return sorted(self.testPerceptrons(testVector),key=lambda x:x[0])[-1][1]


a = float(argv[1])
folder_langs = str(argv[2])
fileReader = FileReader(folder_langs)
controller = PerceptronController(fileReader.getListVectors(),a)
controller.trainPerceptrons()
print("english test")
print("result =",controller.getResultGroupByTest(FileReader.getVectorByText("The self-study lessons in this section are written and organised according to the levels of the Common European Framework of Reference for languages (CEFR). There are different types of texts and interactive exercises that practise the reading skills you need to do well in your studies, to get ahead at work and to communicate in English in your free time.")))
print("\npolish test")
print("result =",controller.getResultGroupByTest(FileReader.getVectorByText("Żeby móc czytać hiszpańskie książki bez pomocy słownika nie potrzeba wcale lat nauki. Udowodnimy Ci to. W każdym rozdziale, oprócz naszego zespołu redaktorskiego, Twoimi nauczycielami będą wybitni pisarze i stworzone przez nich postacie. Z naszą niewielką pomocą będziesz w stanie przeczytać i zrozumieć fragmenty książek lub zaadaptowane teksty.")))
print("\nspanish test")
print("result =",controller.getResultGroupByTest(FileReader.getVectorByText("El extensísimo Diccionario PONS español-polaco te ofrece más de 300.000 términos, frases hechas, giros idiomáticos y traducciones del español al polaco y del polaco al español. Gracias a la revisión constante del corpus del Diccionario por lexicógrafos profesionales podemos garantizar una alta calidad. Todos los contenidos del Diccionario han sido completamente revisados por los expertos de nuestra redacción. Abarca desde el lenguaje coloquial a la terminología técnica teniendo en cuenta las variantes regionales de ambas lenguas. Cada usuario puede ampliar el diccionario creando sus propios artículos. El Diccionario en línea es ideal tanto para su uso en el colegio e instituto como en el ámbito profesional, ya que el contenido cubre todos los campos terminológicos y está inmejorablemente estructurado. Si tienes cualquier sugerencia acerca de nuestro ")))

print("\nFor exit press x!")
while True:
    val = input("Enter text --> ")
    if val=="x":
        break
    try:
        print("result =",controller.getResultGroupByTest(FileReader.getVectorByText(val)))
    except:
        print("Value is invalid")